#!/bin/sh /etc/rc.common
# Copyright (C) 2015 czhongm
#
# Bash编写的简单的Captive portal
#
# Date    : 2014-12-15
# Version : 1.0
# Author  : czhongm <czhongm@gmail.com>

START=90

USE_PROCD=1

IPTABLES="/usr/sbin/iptables"
UHTTPD_BIN="/usr/sbin/uhttpd"

start_instance(){
	local cfg="$1"
	local interface extinterface trustfile validfile trustmac ip validlog knownlog mac portalport
	local portal_url auth_url welcome_url
	local gw_address gw_mac gw_id
	local LINE
	config_get interface "$cfg" interface 'br-lan'
	config_get extinterface "$cfg" extinterface 'eth0.2'
	config_get trustfile "$cfg" trustfile
	config_get validfile "$cfg" validfile
	config_get trustmac	"cfg"	trustmac
	config_get portalport "$cfg" port "2060"
	config_get portal_url "$cfg" index_url
	config_get auth_url "$cfg" auth_url
	config_get welcome_url "$cfg" welcome_url

	validlog="/tmp/portal/$cfg/validate.log"
	knownlog="/tmp/portal/$cfg/known.log"
	ip=$(ifconfig $interface | grep inet | cut -d : -f 2 | cut -d " " -f 1)
	gw_address=$(ifconfig $interface | grep inet | cut -d : -f 2 | cut -d " " -f 1)
	gw_mac=$(ifconfig $interface | grep HWaddr | awk -F " " '{ print $5 }')
	gw_id=$(echo $gw_mac | awk -F ":" '{ print tolower($1$2$3$4$5$6) }')
	
#生成所需文件	
	mkdir -p /tmp/portal/$cfg/www/cgi-bin
	
	cat > /tmp/portal/$cfg/env.sh <<EOF
#!/bin/sh
# Do not edit this file,auto generate by init.d

IPTABLES="$IPTABLES"
CFG="$cfg"
PORTAL_PORT="$portalport"
PORTAL_URL="$portal_url"
AUTH_URL="$auth_url"
WELCOME_URL="$welcome_url"
VALID_USER_LOG="$validlog"
KNOWN_USER_LOG="$knownlog"
INTERFACE="$interface"
GW_ADDRESS="$gw_address"
GW_MAC="$gw_mac"
GW_ID="$gw_id"
	
EOF

	cat /tmp/portal/$cfg/env.sh >> /tmp/portal/$cfg/www/cgi-bin/bashportal.cgi
	grep -Ev "^$|^#.*$" /tgrass/portal/libportal.sh >> /tmp/portal/$cfg/www/cgi-bin/bashportal.cgi
	grep -Ev "^$|^#.*$" /tgrass/portal/bashportal.cgi >> /tmp/portal/$cfg/www/cgi-bin/bashportal.cgi
	chmod 777 /tmp/portal/$cfg/www/cgi-bin/bashportal.cgi
	
	#mangle表规则
	$IPTABLES -t mangle -N bp_${cfg}_trusted
	$IPTABLES -t mangle -N bp_${cfg}_outgoing
	$IPTABLES -t mangle -N bp_${cfg}_incoming
	
	$IPTABLES -t mangle -I PREROUTING 1 -i $interface -j bp_${cfg}_outgoing
	$IPTABLES -t mangle -I PREROUTING 1 -i $interface -j bp_${cfg}_trusted
	$IPTABLES -t mangle -I POSTROUTING 1 -o $interface -j bp_${cfg}_incoming

	$IPTABLES -t nat -N bp_${cfg}_outgoing
	$IPTABLES -t nat -N bp_${cfg}_wifi_to_router
	$IPTABLES -t nat -N bp_${cfg}_wifi_to_internet
	$IPTABLES -t nat -N bp_${cfg}_global
	$IPTABLES -t nat -N bp_${cfg}_unknow
	$IPTABLES -t nat -N bp_${cfg}_authserver
	$IPTABLES -t nat -N bp_${cfg}_validate

	$IPTABLES -t nat -A PREROUTING -i $interface -j bp_${cfg}_outgoing
	$IPTABLES -t nat -A bp_${cfg}_outgoing -d $ip -j bp_${cfg}_wifi_to_router
	$IPTABLES -t nat -A bp_${cfg}_wifi_to_router -j ACCEPT
	$IPTABLES -t nat -A bp_${cfg}_outgoing -j bp_${cfg}_wifi_to_internet
	$IPTABLES -t nat -A bp_${cfg}_wifi_to_internet -m mark --mark 0x01 -j ACCEPT
	$IPTABLES -t nat -A bp_${cfg}_wifi_to_internet -m mark --mark 0x02 -j bp_${cfg}_validate
	#TODO:这里添加认证中需要放行的ip地址
	#$IPTABLES -t nat -A bp_${cfg}_validate -d xxx.xxx.xxx.xxx -j ACCEPT

	$IPTABLES -t nat -A bp_${cfg}_wifi_to_internet -j bp_${cfg}_unknow

	$IPTABLES -t nat -A bp_${cfg}_unknow -j bp_${cfg}_authserver
	#$IPTABLES -t nat -A bp_${cfg}_authserver -d $AUTHSERVER -j ACCEPT
	$IPTABLES -t nat -A bp_${cfg}_unknow -j bp_${cfg}_global
	#$IPTABLES -t nat -A bp_${cfg}_global -d xxx.xxx.xxx.xxx -j ACCEPT
	
	$IPTABLES -t nat -A bp_${cfg}_unknow -p tcp --dport 80 -j REDIRECT --to-ports $portalport

	$IPTABLES -t filter -N bp_${cfg}_wifi_to_internet
	$IPTABLES -t filter -N bp_${cfg}_global
	$IPTABLES -t filter -N bp_${cfg}_unknow
	$IPTABLES -t filter -N bp_${cfg}_know
	$IPTABLES -t filter -N bp_${cfg}_lock
	$IPTABLES -t filter -N bp_${cfg}_authserver
	$IPTABLES -t filter -N bp_${cfg}_validate

	$IPTABLES -t filter -I FORWARD -i $interface -j bp_${cfg}_wifi_to_internet
	$IPTABLES -t filter -A bp_${cfg}_wifi_to_internet  -m state --state INVALID -j DROP
	$IPTABLES -t filter -A bp_${cfg}_wifi_to_internet  -o $extinterface -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
	$IPTABLES -t filter -A bp_${cfg}_wifi_to_internet -j bp_${cfg}_authserver
	#$IPTABLES -t filter -A bp_${cfg}_authserver -d $AUTHSERVER -j ACCEPT
	$IPTABLES -t filter -A bp_${cfg}_wifi_to_internet -m mark --mark 0x03 -j bp_${cfg}_lock
	$IPTABLES -t filter -A bp_${cfg}_lock -j DROP
	$IPTABLES -t filter -A bp_${cfg}_wifi_to_internet -j bp_${cfg}_global
	#$IPTABLES -t filter -A bp_${cfg}_global -d xxx.xxx.xxx.xxx -j ACCEPT
	$IPTABLES -t filter -A bp_${cfg}_wifi_to_internet -m mark --mark 0x02 -j bp_${cfg}_validate
	$IPTABLES -t filter -A bp_${cfg}_validate -j ACCEPT
	$IPTABLES -t filter -A bp_${cfg}_wifi_to_internet -m mark --mark 0x01 -j bp_${cfg}_know
	$IPTABLES -t filter -A bp_${cfg}_know -j ACCEPT
	$IPTABLES -t filter -A bp_${cfg}_wifi_to_internet -j bp_${cfg}_unknow
	$IPTABLES -t filter -A bp_${cfg}_unknow -p tcp --dport 53 -j ACCEPT
	$IPTABLES -t filter -A bp_${cfg}_unknow -p udp --dport 53 -j ACCEPT
	$IPTABLES -t filter -A bp_${cfg}_unknow -p tcp --dport 67 -j ACCEPT
	$IPTABLES -t filter -A bp_${cfg}_unknow -p udp --dport 67 -j ACCEPT
	$IPTABLES -t filter -A bp_${cfg}_unknow -j REJECT --reject-with icmp-port-unreachable
	
	if [ ! -z $trustmac ]; then
		if [ -f $trustmac ]; then
			#从文件中读入放行设定的MAC地址，忽略注释行和空行
			grep -Ev "^$|^#.*$" $trustmac | while read LINE
			do
				mac=$(echo $LINE | awk -F" " '{print $1}')
				$IPTABLES -t mangle -A bp_${cfg}_trusted -m mac --mac-source $mac -j MARK --set-mark 0x01
			done
		fi
	fi
	
	if [ ! -z $trustfile ]; then
		if [ -f $trustfile ]; then
			#从文件中读入放行设定的IP地址，忽略注释行和空行
			grep -Ev "^$|^#.*$" $trustfile | while read LINE
			do
				ip=$(echo $LINE | awk -F" " '{print $1}')
				#if [ valid_ip $ip ]; then
					$IPTABLES -t nat -A bp_${cfg}_global -d $ip -j ACCEPT
					$IPTABLES -t filter -A bp_${cfg}_global -d $ip -j ACCEPT
				#fi
			done
		fi
	fi
	
	if [ ! -z $validfile ]; then
		if [ -f $validfile ]; then
			#从文件中读入放行设定的IP地址，忽略注释行和空行
			grep -Ev "^$|^#.*$" $validfile | while read LINE
			do
				ip=$(echo $LINE | awk -F" " '{print $1}')
				#if [ valid_ip $ip ]; then
					$IPTABLES -t nat -A bp_${cfg}_validate -d $ip -j ACCEPT
					$IPTABLES -t filter -A bp_${cfg}_validate -d $ip -j ACCEPT
				#fi
			done
		fi
	fi

	if [ -f $validlog ]; then
		#载入原有的认证中用户
		while read LINE
		do
			mac=$(echo $LINE | awk -F" " '{print $1}')
			ip=$(echo $LINE | awk -F" " '{print $2}')
			$IPTABLES -t mangle -A bp_${cfg}_outgoing -s $ip -m mac --mac-source $mac -j MARK --set-mark 0x02
			$IPTABLES -t mangle -A bp_${cfg}_incoming -d $ip -j ACCEPT
		done < $validlog
	fi
	if [ -f $knownlog ]; then
		#载入原有的认证中用户
		while read LINE
		do
			mac=$(echo $LINE | awk -F" " '{print $1}')
			ip=$(echo $LINE | awk -F" " '{print $2}')
			$IPTABLES -t mangle -A bp_${cfg}_outgoing -s $ip -m mac --mac-source $mac -j MARK --set-mark 0x01
			$IPTABLES -t mangle -A bp_${cfg}_incoming -d $ip -j ACCEPT
		done < $knownlog
	fi
	
	procd_open_instance
	procd_set_param respawn
	procd_set_param command "$UHTTPD_BIN" -f
	
	procd_append_param command "-h" "/tmp/portal/$cfg/www"
	procd_append_param command "-r" "tgrass"
	procd_append_param command "-x" "/cgi-bin"
	procd_append_param command "-t" 60
	procd_append_param command "-T" 30
	procd_append_param command "-k" 20
	procd_append_param command "-A" 1
	procd_append_param command "-E" "/cgi-bin/bashportal.cgi"
	procd_append_param command "-n" 3
	procd_append_param command "-N" 10
	procd_append_param command "-a" 0
	procd_append_param command "-S" 0
	procd_append_param command "-D" 1
	procd_append_param command "-R" 1
	
	config_get port "$cfg" port 
	if [ -n $port ]; then
		procd_append_param command "-p" "0.0.0.0:$port"
	else
		procd_append_param command "-p" "0.0.0.0:2060"
	fi
	
	procd_close_instance
	
}

stop_instance(){
	local cfg="$1"
	local interface
	config_get interface "$cfg" interface 'br-lan'

	$IPTABLES -t mangle -D PREROUTING -i $interface -j bp_${cfg}_outgoing
	$IPTABLES -t mangle -D PREROUTING -i $interface -j bp_${cfg}_trusted
	$IPTABLES -t mangle -D POSTROUTING -o $interface -j bp_${cfg}_incoming
	$IPTABLES -t mangle -F bp_${cfg}_trusted
	$IPTABLES -t mangle -F bp_${cfg}_outgoing
	$IPTABLES -t mangle -F bp_${cfg}_incoming
	$IPTABLES -t mangle -X bp_${cfg}_trusted
	$IPTABLES -t mangle -X bp_${cfg}_outgoing
	$IPTABLES -t mangle -X bp_${cfg}_incoming

	$IPTABLES -t nat -D PREROUTING -i $interface -j bp_${cfg}_outgoing
	$IPTABLES -t nat -F bp_${cfg}_outgoing
	$IPTABLES -t nat -F bp_${cfg}_wifi_to_router
	$IPTABLES -t nat -F bp_${cfg}_wifi_to_internet
	$IPTABLES -t nat -F bp_${cfg}_global
	$IPTABLES -t nat -F bp_${cfg}_unknow
	$IPTABLES -t nat -F bp_${cfg}_authserver
	$IPTABLES -t nat -F bp_${cfg}_validate
	$IPTABLES -t nat -X bp_${cfg}_outgoing
	$IPTABLES -t nat -X bp_${cfg}_wifi_to_router
	$IPTABLES -t nat -X bp_${cfg}_wifi_to_internet
	$IPTABLES -t nat -X bp_${cfg}_global
	$IPTABLES -t nat -X bp_${cfg}_unknow
	$IPTABLES -t nat -X bp_${cfg}_authserver
	$IPTABLES -t nat -X bp_${cfg}_validate

	$IPTABLES -t filter -D FORWARD -i $interface -j bp_${cfg}_wifi_to_internet
	$IPTABLES -t filter -F bp_${cfg}_wifi_to_internet
	$IPTABLES -t filter -F bp_${cfg}_global
	$IPTABLES -t filter -F bp_${cfg}_unknow
	$IPTABLES -t filter -F bp_${cfg}_know
	$IPTABLES -t filter -F bp_${cfg}_lock
	$IPTABLES -t filter -F bp_${cfg}_authserver
	$IPTABLES -t filter -F bp_${cfg}_validate
	$IPTABLES -t filter -X bp_${cfg}_wifi_to_internet
	$IPTABLES -t filter -X bp_${cfg}_global
	$IPTABLES -t filter -X bp_${cfg}_unknow
	$IPTABLES -t filter -X bp_${cfg}_know
	$IPTABLES -t filter -X bp_${cfg}_lock
	$IPTABLES -t filter -X bp_${cfg}_authserver
	$IPTABLES -t filter -X bp_${cfg}_validate
	
#	rm /tmp/portal/$cfg/www/cgi-bin/bashportal.cgi
}

service_triggers(){
	procd_add_reload_trigger "bashportal"
}

start_service() {
	config_load bashportal
	config_foreach start_instance portal
}

stop_service() {
	config_load bashportal
	config_foreach stop_instance portal
}
